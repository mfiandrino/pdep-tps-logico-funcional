Información General:

data Persona = Persona {edad :: Int, suenios :: [(Persona -> Persona)], nombre :: String, felicidonios :: Int, habilidades :: [String]} deriving Show

--Recursos para ejemplos
persona1 = Persona 25 [recibirseDeUnaCarrera "Arquitectura", cumplirSuenioViajar ["Roma","Oporto"]] "Maximiliano" 100 ["Pintura","Java"]
persona2 = Persona 46 [recibirseDeUnaCarrera "Comunicacion Social", unaPersonaSeEnamoraDeOtra persona1] "Camila" 250 ["Decir palindromos"]
persona3 = Persona 12 [recibirseDeUnaCarrera "Chef", cumplirSuenioViajar ["Shangai"]] "Juan Ignacio" 55 ["Construir maquetas","Photoshop"]
persona4 = Persona 12 [unaPersonaSeEnamoraDeOtra persona3,recibirseDeUnaCarrera "Ingenieria"] "Nicolas" 55 ["Construir maquetas","Photoshop"]
persona5 = Persona 12 [unaPersonaSeEnamoraDeOtra persona4,recibirseDeUnaCarrera "Ingenieria", cumplirSuenioViajar ["Barcelona", "Lima", "Caracas"]] "Nicolas" 46 ["Construir maquetas","Photoshop"]



Resultados de Testing punto 1a: Coeficiente de satisfacción

*Main> calcularCoefSatisfaccion persona1
200
*Main> calcularCoefSatisfaccion persona2
11500
*Main> calcularCoefSatisfaccion persona3
110

*Main> calcularCoefSatisfaccion persona5
23

Resultados de Testing punto 1b: Grado de ambición de una persona

*Main> gradoDeAmbicion persona1
50
*Main> gradoDeAmbicion persona2
500
*Main> gradoDeAmbicion persona5
6

Resultados de Testing punto 2c : Nombre lindo

*Main> esNombreLindo persona2
True
*Main> esNombreLindo persona1
False
*Main> esNombreLindo persona4
False

Resultados de Testing punto 3c : Enamorarse de otra persona

*Main> unaPersonaSeEnamoraDeOtra persona1 persona2
Persona {edad = 25, suenios = [<function>,<function>], nombre = "Maximiliano", felicidonios = 350, habilidades = ["Pintura","Java"]}
*Main> unaPersonaSeEnamoraDeOtra persona3 persona2
Persona {edad = 12, suenios = [<function>,<function>], nombre = "Juan Ignacio", felicidonios = 305, habilidades = ["Construir maquetas","Photoshop"]}

